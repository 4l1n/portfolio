{"version":3,"sources":["components/Dialog.js","components/projects.js","App.js","registerServiceWorker.js","index.js"],"names":["dialogStyles","width","maxWidth","margin","position","left","top","transform","zIndex","backgroundColor","padding","borderRadius","display","flexDirection","dialogCloseButtonStyles","marginBottom","cursor","border","height","fontWeight","alignSelf","Dialog","dialog","style","onClick","this","props","onClose","children","isOpen","Component","Projects","handleToggle","setState","active","state","actions","label","activeTab","className","shadow","minWidth","color","background","textDecoration","href","target","colored","e","onChange","tabId","ripple","col","toggleCategories","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e457a1b6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nlet dialogStyles = {\r\n    width: '500px',\r\n    maxWidth: '100%',\r\n    margin: '0 auto',\r\n    position: 'fixed',\r\n    left: '50%',\r\n    top: '50%',\r\n    transform: 'translate(-50%,-50%)',\r\n    zIndex: '999',\r\n    backgroundColor: '#eee',\r\n    padding: '10px 20px 40px',\r\n    borderRadius: '8px',\r\n    display: 'flex',\r\n    flexDirection: 'column'\r\n};\r\n\r\nlet dialogCloseButtonStyles = {\r\n    marginBottom: '15px',\r\n    padding: '3px 8px',\r\n    cursor: 'pointer',\r\n    borderRadius: '50%',\r\n    border: 'none',\r\n    width: '30px',\r\n    height: '30px',\r\n    fontWeight: 'bold',\r\n    alignSelf: 'flex-end'\r\n};\r\n\r\n\r\nclass Dialog extends Component {\r\n    render() {\r\n        let dialog = (\r\n            <div style={dialogStyles}>\r\n                <button style={dialogCloseButtonStyles} onClick={this.props.onClose}>x</button>\r\n\r\n                <div>{this.props.children}</div>\r\n            </div>\r\n        );\r\n\r\n        if (! this.props.isOpen) {\r\n            dialog = null;\r\n        }\r\n        return (\r\n            <div>\r\n                {dialog}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dialog;\r\n","import React, { Component } from 'react';\nimport { Tabs, Tab, Grid, Cell, Card, CardTitle, CardText, CardActions, Button } from 'react-mdl';\nimport Dialog from './Dialog'\n\nclass Projects extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { activeTab: 0 };\n  }\n\n  handleToggle = () => {\n    this.setState({ active: !this.state.active });\n  };\n\n  actions = [\n    { label: \"Cancel\", onClick: this.handleToggle },\n    { label: \"Save\", onClick: this.handleToggle }\n  ];\n\n  toggleCategories() {\n\n    if(this.state.activeTab === 0){\n      return(\n        <div className=\"projects-grid\">\n          {/* Arquinatur */}\n          <Card shadow={5} style={{minWidth: '450', margin: 'auto'}}>\n            <CardTitle style={{color: '#fff', height: '176px', background: 'url(https://alinc.carrd.co/assets/images/image06.jpg?v01282118021651) center / cover'}} >Arquinatur</CardTitle>\n            <CardText>\n            La sabiduría de la naturaleza aplicada a la arquitectura.\n            </CardText>\n            <CardActions border>\n              <a style={{textDecoration: 'none', color: 'rgb(63,81,181)'}} href=\"https://www.arquinatur.com/\" target=\"_blank\"><Button colored>WEB</Button></a>\n              <a style={{textDecoration: 'none', color: 'rgb(63,81,181)'}} href=\"https://twitter.com/Arquinatur\" target=\"_blank\"><Button colored>Twitter</Button></a>\n              <Button style={{textDecoration: 'none', color: 'rgb(63,81,181)'}} onClick={(e) => this.setState({ isOpen: true })}>Información</Button>\n              <Dialog isOpen={this.state.isOpen} onClose={(e) => this.setState({ isOpen: false})}>\n                Hola\n              </Dialog>\n            </CardActions>\n          </Card>\n          \n        </div>\n\n\n      )\n    } else if(this.state.activeTab === 1) {\n      return (\n        <div><h1>This is React</h1></div>\n      )\n    }\n\n  }\n\n\n\n  render() {\n    return(\n      <div>\n        <Tabs activeTab={this.state.activeTab} onChange={(tabId) => this.setState({ activeTab: tabId })} ripple>\n          <Tab>Web</Tab>\n          <Tab>React</Tab>\n        </Tabs>\n\n\n          <Grid>\n            <Cell col={4}>\n              <div className=\"content\">{this.toggleCategories()}</div>\n            </Cell>\n          </Grid>\n\n\n      </div>\n    )\n  }\n}\n\n\nexport default Projects;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\nimport Main from './components/projects';\nimport { Link } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"demo-big-content\">\n    <Layout>\n        <Content>\n            <div className=\"page-content\" />\n            <Main/>\n        </Content>\n    </Layout>\n</div>\n\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n<App />\n  </BrowserRouter>\n  , document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}